<?php
/**
 * AddOnsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  LagoClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace LagoClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LagoClient\ApiException;
use LagoClient\Configuration;
use LagoClient\HeaderSelector;
use LagoClient\ObjectSerializer;

/**
 * AddOnsApi Class Doc Comment
 *
 * @category Class
 * @package  LagoClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddOnsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'applyAddOn' => [
            'application/json',
        ],
        'createAddOn' => [
            'application/json',
        ],
        'destroyAddOn' => [
            'application/json',
        ],
        'findAddOn' => [
            'application/json',
        ],
        'findAllAddOns' => [
            'application/json',
        ],
        'updateAddOn' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation applyAddOn
     *
     * Apply an add-on to a customer
     *
     * @param  \LagoClient\Model\AppliedAddOnInput $applied_add_on_input Apply add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LagoClient\Model\AppliedAddOn|\LagoClient\Model\ApiResponseBadRequest|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound|\LagoClient\Model\ApiResponseUnprocessableEntity
     */
    public function applyAddOn($applied_add_on_input, string $contentType = self::contentTypes['applyAddOn'][0])
    {
        list($response) = $this->applyAddOnWithHttpInfo($applied_add_on_input, $contentType);
        return $response;
    }

    /**
     * Operation applyAddOnWithHttpInfo
     *
     * Apply an add-on to a customer
     *
     * @param  \LagoClient\Model\AppliedAddOnInput $applied_add_on_input Apply add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LagoClient\Model\AppliedAddOn|\LagoClient\Model\ApiResponseBadRequest|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound|\LagoClient\Model\ApiResponseUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyAddOnWithHttpInfo($applied_add_on_input, string $contentType = self::contentTypes['applyAddOn'][0])
    {
        $request = $this->applyAddOnRequest($applied_add_on_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LagoClient\Model\AppliedAddOn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\AppliedAddOn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\AppliedAddOn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\LagoClient\Model\ApiResponseBadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseBadRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseBadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LagoClient\Model\ApiResponseUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\LagoClient\Model\ApiResponseNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseNotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\LagoClient\Model\ApiResponseUnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LagoClient\Model\AppliedAddOn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\AppliedAddOn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyAddOnAsync
     *
     * Apply an add-on to a customer
     *
     * @param  \LagoClient\Model\AppliedAddOnInput $applied_add_on_input Apply add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyAddOnAsync($applied_add_on_input, string $contentType = self::contentTypes['applyAddOn'][0])
    {
        return $this->applyAddOnAsyncWithHttpInfo($applied_add_on_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyAddOnAsyncWithHttpInfo
     *
     * Apply an add-on to a customer
     *
     * @param  \LagoClient\Model\AppliedAddOnInput $applied_add_on_input Apply add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyAddOnAsyncWithHttpInfo($applied_add_on_input, string $contentType = self::contentTypes['applyAddOn'][0])
    {
        $returnType = '\LagoClient\Model\AppliedAddOn';
        $request = $this->applyAddOnRequest($applied_add_on_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'applyAddOn'
     *
     * @param  \LagoClient\Model\AppliedAddOnInput $applied_add_on_input Apply add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyAddOnRequest($applied_add_on_input, string $contentType = self::contentTypes['applyAddOn'][0])
    {

        // verify the required parameter 'applied_add_on_input' is set
        if ($applied_add_on_input === null || (is_array($applied_add_on_input) && count($applied_add_on_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $applied_add_on_input when calling applyAddOn'
            );
        }


        $resourcePath = '/applied_add_ons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($applied_add_on_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($applied_add_on_input));
            } else {
                $httpBody = $applied_add_on_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAddOn
     *
     * Create a new add-on
     *
     * @param  \LagoClient\Model\AddOnInput $add_on_input Add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseBadRequest|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseUnprocessableEntity
     */
    public function createAddOn($add_on_input, string $contentType = self::contentTypes['createAddOn'][0])
    {
        list($response) = $this->createAddOnWithHttpInfo($add_on_input, $contentType);
        return $response;
    }

    /**
     * Operation createAddOnWithHttpInfo
     *
     * Create a new add-on
     *
     * @param  \LagoClient\Model\AddOnInput $add_on_input Add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseBadRequest|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAddOnWithHttpInfo($add_on_input, string $contentType = self::contentTypes['createAddOn'][0])
    {
        $request = $this->createAddOnRequest($add_on_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LagoClient\Model\AddOn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\AddOn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\AddOn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\LagoClient\Model\ApiResponseBadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseBadRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseBadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LagoClient\Model\ApiResponseUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\LagoClient\Model\ApiResponseUnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LagoClient\Model\AddOn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\AddOn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAddOnAsync
     *
     * Create a new add-on
     *
     * @param  \LagoClient\Model\AddOnInput $add_on_input Add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAddOnAsync($add_on_input, string $contentType = self::contentTypes['createAddOn'][0])
    {
        return $this->createAddOnAsyncWithHttpInfo($add_on_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAddOnAsyncWithHttpInfo
     *
     * Create a new add-on
     *
     * @param  \LagoClient\Model\AddOnInput $add_on_input Add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAddOnAsyncWithHttpInfo($add_on_input, string $contentType = self::contentTypes['createAddOn'][0])
    {
        $returnType = '\LagoClient\Model\AddOn';
        $request = $this->createAddOnRequest($add_on_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAddOn'
     *
     * @param  \LagoClient\Model\AddOnInput $add_on_input Add-on payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAddOnRequest($add_on_input, string $contentType = self::contentTypes['createAddOn'][0])
    {

        // verify the required parameter 'add_on_input' is set
        if ($add_on_input === null || (is_array($add_on_input) && count($add_on_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_on_input when calling createAddOn'
            );
        }


        $resourcePath = '/add_ons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_on_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_on_input));
            } else {
                $httpBody = $add_on_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroyAddOn
     *
     * Delete an add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroyAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound
     */
    public function destroyAddOn($code, string $contentType = self::contentTypes['destroyAddOn'][0])
    {
        list($response) = $this->destroyAddOnWithHttpInfo($code, $contentType);
        return $response;
    }

    /**
     * Operation destroyAddOnWithHttpInfo
     *
     * Delete an add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroyAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyAddOnWithHttpInfo($code, string $contentType = self::contentTypes['destroyAddOn'][0])
    {
        $request = $this->destroyAddOnRequest($code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LagoClient\Model\AddOn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\AddOn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\AddOn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LagoClient\Model\ApiResponseUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\LagoClient\Model\ApiResponseNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseNotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LagoClient\Model\AddOn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\AddOn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation destroyAddOnAsync
     *
     * Delete an add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroyAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyAddOnAsync($code, string $contentType = self::contentTypes['destroyAddOn'][0])
    {
        return $this->destroyAddOnAsyncWithHttpInfo($code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroyAddOnAsyncWithHttpInfo
     *
     * Delete an add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroyAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroyAddOnAsyncWithHttpInfo($code, string $contentType = self::contentTypes['destroyAddOn'][0])
    {
        $returnType = '\LagoClient\Model\AddOn';
        $request = $this->destroyAddOnRequest($code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroyAddOn'
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroyAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function destroyAddOnRequest($code, string $contentType = self::contentTypes['destroyAddOn'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling destroyAddOn'
            );
        }


        $resourcePath = '/add_ons/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAddOn
     *
     * Find add-on by code
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound
     */
    public function findAddOn($code, string $contentType = self::contentTypes['findAddOn'][0])
    {
        list($response) = $this->findAddOnWithHttpInfo($code, $contentType);
        return $response;
    }

    /**
     * Operation findAddOnWithHttpInfo
     *
     * Find add-on by code
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAddOnWithHttpInfo($code, string $contentType = self::contentTypes['findAddOn'][0])
    {
        $request = $this->findAddOnRequest($code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LagoClient\Model\AddOn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\AddOn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\AddOn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LagoClient\Model\ApiResponseUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\LagoClient\Model\ApiResponseNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseNotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LagoClient\Model\AddOn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\AddOn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAddOnAsync
     *
     * Find add-on by code
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAddOnAsync($code, string $contentType = self::contentTypes['findAddOn'][0])
    {
        return $this->findAddOnAsyncWithHttpInfo($code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAddOnAsyncWithHttpInfo
     *
     * Find add-on by code
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAddOnAsyncWithHttpInfo($code, string $contentType = self::contentTypes['findAddOn'][0])
    {
        $returnType = '\LagoClient\Model\AddOn';
        $request = $this->findAddOnRequest($code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAddOn'
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAddOnRequest($code, string $contentType = self::contentTypes['findAddOn'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling findAddOn'
            );
        }


        $resourcePath = '/add_ons/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllAddOns
     *
     * Find add-ons
     *
     * @param  int $page Number of page (optional)
     * @param  int $per_page Number of records per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllAddOns'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LagoClient\Model\AddOnsPaginated|\LagoClient\Model\ApiResponseUnauthorized
     */
    public function findAllAddOns($page = null, $per_page = null, string $contentType = self::contentTypes['findAllAddOns'][0])
    {
        list($response) = $this->findAllAddOnsWithHttpInfo($page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation findAllAddOnsWithHttpInfo
     *
     * Find add-ons
     *
     * @param  int $page Number of page (optional)
     * @param  int $per_page Number of records per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllAddOns'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LagoClient\Model\AddOnsPaginated|\LagoClient\Model\ApiResponseUnauthorized, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllAddOnsWithHttpInfo($page = null, $per_page = null, string $contentType = self::contentTypes['findAllAddOns'][0])
    {
        $request = $this->findAllAddOnsRequest($page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LagoClient\Model\AddOnsPaginated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\AddOnsPaginated' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\AddOnsPaginated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LagoClient\Model\ApiResponseUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LagoClient\Model\AddOnsPaginated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\AddOnsPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAllAddOnsAsync
     *
     * Find add-ons
     *
     * @param  int $page Number of page (optional)
     * @param  int $per_page Number of records per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllAddOns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllAddOnsAsync($page = null, $per_page = null, string $contentType = self::contentTypes['findAllAddOns'][0])
    {
        return $this->findAllAddOnsAsyncWithHttpInfo($page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllAddOnsAsyncWithHttpInfo
     *
     * Find add-ons
     *
     * @param  int $page Number of page (optional)
     * @param  int $per_page Number of records per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllAddOns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllAddOnsAsyncWithHttpInfo($page = null, $per_page = null, string $contentType = self::contentTypes['findAllAddOns'][0])
    {
        $returnType = '\LagoClient\Model\AddOnsPaginated';
        $request = $this->findAllAddOnsRequest($page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllAddOns'
     *
     * @param  int $page Number of page (optional)
     * @param  int $per_page Number of records per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllAddOns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllAddOnsRequest($page = null, $per_page = null, string $contentType = self::contentTypes['findAllAddOns'][0])
    {




        $resourcePath = '/add_ons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAddOn
     *
     * Update an existing add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  \LagoClient\Model\AddOnInput $add_on_input Update an existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseBadRequest|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound|\LagoClient\Model\ApiResponseUnprocessableEntity
     */
    public function updateAddOn($code, $add_on_input, string $contentType = self::contentTypes['updateAddOn'][0])
    {
        list($response) = $this->updateAddOnWithHttpInfo($code, $add_on_input, $contentType);
        return $response;
    }

    /**
     * Operation updateAddOnWithHttpInfo
     *
     * Update an existing add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  \LagoClient\Model\AddOnInput $add_on_input Update an existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAddOn'] to see the possible values for this operation
     *
     * @throws \LagoClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \LagoClient\Model\AddOn|\LagoClient\Model\ApiResponseBadRequest|\LagoClient\Model\ApiResponseUnauthorized|\LagoClient\Model\ApiResponseNotFound|\LagoClient\Model\ApiResponseUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAddOnWithHttpInfo($code, $add_on_input, string $contentType = self::contentTypes['updateAddOn'][0])
    {
        $request = $this->updateAddOnRequest($code, $add_on_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\LagoClient\Model\AddOn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\AddOn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\AddOn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\LagoClient\Model\ApiResponseBadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseBadRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseBadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\LagoClient\Model\ApiResponseUnauthorized' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnauthorized' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnauthorized', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\LagoClient\Model\ApiResponseNotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseNotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseNotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\LagoClient\Model\ApiResponseUnprocessableEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\LagoClient\Model\ApiResponseUnprocessableEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\LagoClient\Model\ApiResponseUnprocessableEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\LagoClient\Model\AddOn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\AddOn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\LagoClient\Model\ApiResponseUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAddOnAsync
     *
     * Update an existing add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  \LagoClient\Model\AddOnInput $add_on_input Update an existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddOnAsync($code, $add_on_input, string $contentType = self::contentTypes['updateAddOn'][0])
    {
        return $this->updateAddOnAsyncWithHttpInfo($code, $add_on_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAddOnAsyncWithHttpInfo
     *
     * Update an existing add-on
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  \LagoClient\Model\AddOnInput $add_on_input Update an existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddOnAsyncWithHttpInfo($code, $add_on_input, string $contentType = self::contentTypes['updateAddOn'][0])
    {
        $returnType = '\LagoClient\Model\AddOn';
        $request = $this->updateAddOnRequest($code, $add_on_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAddOn'
     *
     * @param  string $code Code of the existing add-on (required)
     * @param  \LagoClient\Model\AddOnInput $add_on_input Update an existing add-on (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAddOn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAddOnRequest($code, $add_on_input, string $contentType = self::contentTypes['updateAddOn'][0])
    {

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling updateAddOn'
            );
        }

        // verify the required parameter 'add_on_input' is set
        if ($add_on_input === null || (is_array($add_on_input) && count($add_on_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_on_input when calling updateAddOn'
            );
        }


        $resourcePath = '/add_ons/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_on_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_on_input));
            } else {
                $httpBody = $add_on_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
