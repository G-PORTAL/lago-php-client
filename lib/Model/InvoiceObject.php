<?php
/**
 * InvoiceObject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.20.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceObject Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'sequential_id' => 'int',
        'number' => 'string',
        'issuing_date' => 'string',
        'invoice_type' => 'string',
        'status' => 'string',
        'payment_status' => 'string',
        'amount_cents' => 'int',
        'amount_currency' => 'string',
        'vat_amount_cents' => 'int',
        'vat_amount_currency' => 'string',
        'credit_amount_cents' => 'int',
        'credit_amount_currency' => 'string',
        'total_amount_cents' => 'int',
        'total_amount_currency' => 'string',
        'legacy' => 'bool',
        'file_url' => 'string',
        'customer' => '\OpenAPI\Client\Model\CustomerObject',
        'subscriptions' => '\OpenAPI\Client\Model\SubscriptionObject[]',
        'fees' => '\OpenAPI\Client\Model\FeeObject[]',
        'credits' => '\OpenAPI\Client\Model\CreditObject[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => null,
        'sequential_id' => null,
        'number' => null,
        'issuing_date' => null,
        'invoice_type' => null,
        'status' => null,
        'payment_status' => null,
        'amount_cents' => null,
        'amount_currency' => null,
        'vat_amount_cents' => null,
        'vat_amount_currency' => null,
        'credit_amount_cents' => null,
        'credit_amount_currency' => null,
        'total_amount_cents' => null,
        'total_amount_currency' => null,
        'legacy' => null,
        'file_url' => null,
        'customer' => null,
        'subscriptions' => null,
        'fees' => null,
        'credits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => false,
		'sequential_id' => false,
		'number' => false,
		'issuing_date' => false,
		'invoice_type' => false,
		'status' => false,
		'payment_status' => false,
		'amount_cents' => false,
		'amount_currency' => false,
		'vat_amount_cents' => false,
		'vat_amount_currency' => false,
		'credit_amount_cents' => false,
		'credit_amount_currency' => false,
		'total_amount_cents' => false,
		'total_amount_currency' => false,
		'legacy' => false,
		'file_url' => false,
		'customer' => false,
		'subscriptions' => false,
		'fees' => false,
		'credits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'sequential_id' => 'sequential_id',
        'number' => 'number',
        'issuing_date' => 'issuing_date',
        'invoice_type' => 'invoice_type',
        'status' => 'status',
        'payment_status' => 'payment_status',
        'amount_cents' => 'amount_cents',
        'amount_currency' => 'amount_currency',
        'vat_amount_cents' => 'vat_amount_cents',
        'vat_amount_currency' => 'vat_amount_currency',
        'credit_amount_cents' => 'credit_amount_cents',
        'credit_amount_currency' => 'credit_amount_currency',
        'total_amount_cents' => 'total_amount_cents',
        'total_amount_currency' => 'total_amount_currency',
        'legacy' => 'legacy',
        'file_url' => 'file_url',
        'customer' => 'customer',
        'subscriptions' => 'subscriptions',
        'fees' => 'fees',
        'credits' => 'credits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'sequential_id' => 'setSequentialId',
        'number' => 'setNumber',
        'issuing_date' => 'setIssuingDate',
        'invoice_type' => 'setInvoiceType',
        'status' => 'setStatus',
        'payment_status' => 'setPaymentStatus',
        'amount_cents' => 'setAmountCents',
        'amount_currency' => 'setAmountCurrency',
        'vat_amount_cents' => 'setVatAmountCents',
        'vat_amount_currency' => 'setVatAmountCurrency',
        'credit_amount_cents' => 'setCreditAmountCents',
        'credit_amount_currency' => 'setCreditAmountCurrency',
        'total_amount_cents' => 'setTotalAmountCents',
        'total_amount_currency' => 'setTotalAmountCurrency',
        'legacy' => 'setLegacy',
        'file_url' => 'setFileUrl',
        'customer' => 'setCustomer',
        'subscriptions' => 'setSubscriptions',
        'fees' => 'setFees',
        'credits' => 'setCredits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'sequential_id' => 'getSequentialId',
        'number' => 'getNumber',
        'issuing_date' => 'getIssuingDate',
        'invoice_type' => 'getInvoiceType',
        'status' => 'getStatus',
        'payment_status' => 'getPaymentStatus',
        'amount_cents' => 'getAmountCents',
        'amount_currency' => 'getAmountCurrency',
        'vat_amount_cents' => 'getVatAmountCents',
        'vat_amount_currency' => 'getVatAmountCurrency',
        'credit_amount_cents' => 'getCreditAmountCents',
        'credit_amount_currency' => 'getCreditAmountCurrency',
        'total_amount_cents' => 'getTotalAmountCents',
        'total_amount_currency' => 'getTotalAmountCurrency',
        'legacy' => 'getLegacy',
        'file_url' => 'getFileUrl',
        'customer' => 'getCustomer',
        'subscriptions' => 'getSubscriptions',
        'fees' => 'getFees',
        'credits' => 'getCredits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVOICE_TYPE_SUBSCRIPTION = 'subscription';
    public const INVOICE_TYPE_ADD_ON = 'add_on';
    public const INVOICE_TYPE_CREDIT = 'credit';
    public const STATUS_DRAFT = 'draft';
    public const STATUS_FINALIZED = 'finalized';
    public const PAYMENT_STATUS_PENDING = 'pending';
    public const PAYMENT_STATUS_SUCCEEDED = 'succeeded';
    public const PAYMENT_STATUS_FAILED = 'failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_SUBSCRIPTION,
            self::INVOICE_TYPE_ADD_ON,
            self::INVOICE_TYPE_CREDIT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_FINALIZED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PENDING,
            self::PAYMENT_STATUS_SUCCEEDED,
            self::PAYMENT_STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('sequential_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('issuing_date', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('amount_cents', $data ?? [], null);
        $this->setIfExists('amount_currency', $data ?? [], null);
        $this->setIfExists('vat_amount_cents', $data ?? [], null);
        $this->setIfExists('vat_amount_currency', $data ?? [], null);
        $this->setIfExists('credit_amount_cents', $data ?? [], null);
        $this->setIfExists('credit_amount_currency', $data ?? [], null);
        $this->setIfExists('total_amount_cents', $data ?? [], null);
        $this->setIfExists('total_amount_currency', $data ?? [], null);
        $this->setIfExists('legacy', $data ?? [], null);
        $this->setIfExists('file_url', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('subscriptions', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoice_type', must be one of '%s'",
                $this->container['invoice_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string|null
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string|null $lago_id lago_id
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            throw new \InvalidArgumentException('non-nullable lago_id cannot be null');
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets sequential_id
     *
     * @return int|null
     */
    public function getSequentialId()
    {
        return $this->container['sequential_id'];
    }

    /**
     * Sets sequential_id
     *
     * @param int|null $sequential_id sequential_id
     *
     * @return self
     */
    public function setSequentialId($sequential_id)
    {
        if (is_null($sequential_id)) {
            throw new \InvalidArgumentException('non-nullable sequential_id cannot be null');
        }
        $this->container['sequential_id'] = $sequential_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets issuing_date
     *
     * @return string|null
     */
    public function getIssuingDate()
    {
        return $this->container['issuing_date'];
    }

    /**
     * Sets issuing_date
     *
     * @param string|null $issuing_date issuing_date
     *
     * @return self
     */
    public function setIssuingDate($issuing_date)
    {
        if (is_null($issuing_date)) {
            throw new \InvalidArgumentException('non-nullable issuing_date cannot be null');
        }
        $this->container['issuing_date'] = $issuing_date;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string|null
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string|null $invoice_type invoice_type
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoice_type', must be one of '%s'",
                    $invoice_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int|null
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int|null $amount_cents amount_cents
     *
     * @return self
     */
    public function setAmountCents($amount_cents)
    {
        if (is_null($amount_cents)) {
            throw new \InvalidArgumentException('non-nullable amount_cents cannot be null');
        }
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return string|null
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param string|null $amount_currency amount_currency
     *
     * @return self
     */
    public function setAmountCurrency($amount_currency)
    {
        if (is_null($amount_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_currency cannot be null');
        }
        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets vat_amount_cents
     *
     * @return int|null
     */
    public function getVatAmountCents()
    {
        return $this->container['vat_amount_cents'];
    }

    /**
     * Sets vat_amount_cents
     *
     * @param int|null $vat_amount_cents vat_amount_cents
     *
     * @return self
     */
    public function setVatAmountCents($vat_amount_cents)
    {
        if (is_null($vat_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable vat_amount_cents cannot be null');
        }
        $this->container['vat_amount_cents'] = $vat_amount_cents;

        return $this;
    }

    /**
     * Gets vat_amount_currency
     *
     * @return string|null
     */
    public function getVatAmountCurrency()
    {
        return $this->container['vat_amount_currency'];
    }

    /**
     * Sets vat_amount_currency
     *
     * @param string|null $vat_amount_currency vat_amount_currency
     *
     * @return self
     */
    public function setVatAmountCurrency($vat_amount_currency)
    {
        if (is_null($vat_amount_currency)) {
            throw new \InvalidArgumentException('non-nullable vat_amount_currency cannot be null');
        }
        $this->container['vat_amount_currency'] = $vat_amount_currency;

        return $this;
    }

    /**
     * Gets credit_amount_cents
     *
     * @return int|null
     */
    public function getCreditAmountCents()
    {
        return $this->container['credit_amount_cents'];
    }

    /**
     * Sets credit_amount_cents
     *
     * @param int|null $credit_amount_cents credit_amount_cents
     *
     * @return self
     */
    public function setCreditAmountCents($credit_amount_cents)
    {
        if (is_null($credit_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable credit_amount_cents cannot be null');
        }
        $this->container['credit_amount_cents'] = $credit_amount_cents;

        return $this;
    }

    /**
     * Gets credit_amount_currency
     *
     * @return string|null
     */
    public function getCreditAmountCurrency()
    {
        return $this->container['credit_amount_currency'];
    }

    /**
     * Sets credit_amount_currency
     *
     * @param string|null $credit_amount_currency credit_amount_currency
     *
     * @return self
     */
    public function setCreditAmountCurrency($credit_amount_currency)
    {
        if (is_null($credit_amount_currency)) {
            throw new \InvalidArgumentException('non-nullable credit_amount_currency cannot be null');
        }
        $this->container['credit_amount_currency'] = $credit_amount_currency;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int|null
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int|null $total_amount_cents total_amount_cents
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        if (is_null($total_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable total_amount_cents cannot be null');
        }
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets total_amount_currency
     *
     * @return string|null
     */
    public function getTotalAmountCurrency()
    {
        return $this->container['total_amount_currency'];
    }

    /**
     * Sets total_amount_currency
     *
     * @param string|null $total_amount_currency total_amount_currency
     *
     * @return self
     */
    public function setTotalAmountCurrency($total_amount_currency)
    {
        if (is_null($total_amount_currency)) {
            throw new \InvalidArgumentException('non-nullable total_amount_currency cannot be null');
        }
        $this->container['total_amount_currency'] = $total_amount_currency;

        return $this;
    }

    /**
     * Gets legacy
     *
     * @return bool|null
     */
    public function getLegacy()
    {
        return $this->container['legacy'];
    }

    /**
     * Sets legacy
     *
     * @param bool|null $legacy legacy
     *
     * @return self
     */
    public function setLegacy($legacy)
    {
        if (is_null($legacy)) {
            throw new \InvalidArgumentException('non-nullable legacy cannot be null');
        }
        $this->container['legacy'] = $legacy;

        return $this;
    }

    /**
     * Gets file_url
     *
     * @return string|null
     */
    public function getFileUrl()
    {
        return $this->container['file_url'];
    }

    /**
     * Sets file_url
     *
     * @param string|null $file_url file_url
     *
     * @return self
     */
    public function setFileUrl($file_url)
    {
        if (is_null($file_url)) {
            throw new \InvalidArgumentException('non-nullable file_url cannot be null');
        }
        $this->container['file_url'] = $file_url;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\CustomerObject|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\CustomerObject|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return \OpenAPI\Client\Model\SubscriptionObject[]|null
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param \OpenAPI\Client\Model\SubscriptionObject[]|null $subscriptions subscriptions
     *
     * @return self
     */
    public function setSubscriptions($subscriptions)
    {
        if (is_null($subscriptions)) {
            throw new \InvalidArgumentException('non-nullable subscriptions cannot be null');
        }
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\FeeObject[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\FeeObject[]|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \OpenAPI\Client\Model\CreditObject[]|null
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \OpenAPI\Client\Model\CreditObject[]|null $credits credits
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            throw new \InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


